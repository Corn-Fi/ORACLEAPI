{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "acceptEther",
          "type": "bool"
        }
      ],
      "name": "setAcceptEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "allSourcePaths": {
    "55": "contracts/openzeppelin/contracts/mocks/EtherReceiverMock.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin/contracts/mocks/EtherReceiverMock.sol",
    "exportedSymbols": {
      "EtherReceiverMock": [
        10380
      ]
    },
    "id": 10381,
    "license": null,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10356,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:55"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 10380,
        "linearizedBaseContracts": [
          10380
        ],
        "name": "EtherReceiverMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 10358,
            "mutability": "mutable",
            "name": "_acceptEther",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 10380,
            "src": "58:25:55",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 10357,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "58:4:55",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 10367,
              "nodeType": "Block",
              "src": "139:43:55",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 10365,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 10363,
                      "name": "_acceptEther",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10358,
                      "src": "149:12:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 10364,
                      "name": "acceptEther",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10360,
                      "src": "164:11:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "149:26:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 10366,
                  "nodeType": "ExpressionStatement",
                  "src": "149:26:55"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "4fea120c",
            "id": 10368,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setAcceptEther",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 10361,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10360,
                  "mutability": "mutable",
                  "name": "acceptEther",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10368,
                  "src": "114:16:55",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 10359,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "114:4:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "113:18:55"
            },
            "returnParameters": {
              "id": 10362,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "139:0:55"
            },
            "scope": 10380,
            "src": "90:92:55",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10378,
              "nodeType": "Block",
              "src": "216:68:55",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "id": 10372,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "230:13:55",
                    "subExpression": {
                      "argumentTypes": null,
                      "id": 10371,
                      "name": "_acceptEther",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10358,
                      "src": "231:12:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 10377,
                  "nodeType": "IfStatement",
                  "src": "226:52:55",
                  "trueBody": {
                    "id": 10376,
                    "nodeType": "Block",
                    "src": "245:33:55",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 10373,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -19,
                              -19
                            ],
                            "referencedDeclaration": -19,
                            "src": "259:6:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 10374,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "259:8:55",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 10375,
                        "nodeType": "ExpressionStatement",
                        "src": "259:8:55"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": null,
            "id": 10379,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 10369,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "196:2:55"
            },
            "returnParameters": {
              "id": 10370,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "216:0:55"
            },
            "scope": 10380,
            "src": "188:96:55",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 10381,
        "src": "25:261:55"
      }
    ],
    "src": "0:287:55"
  },
  "bytecode": "6080604052348015600f57600080fd5b5060a38061001e6000396000f3fe608060405260043610601f5760003560e01c80634fea120c146038576033565b3660335760005460ff16603157600080fd5b005b600080fd5b348015604357600080fd5b50603160048036036020811015605857600080fd5b506000805460ff19169135151591909117905556fea2646970667358221220ae406edd49d7b928f4bb2bae7fba79265c61c59d7b7553b596724ed592c5e0d964736f6c634300060c0033",
  "bytecodeSha1": "726a2efe02c1de69664dce9502a425c52a010509",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.6.12+commit.27d51765"
  },
  "contractName": "EtherReceiverMock",
  "coverageMap": {
    "branches": {
      "55": {
        "EtherReceiverMock.<receive>": {
          "2": [
            231,
            243,
            false
          ]
        }
      }
    },
    "statements": {
      "55": {
        "EtherReceiverMock.<receive>": {
          "0": [
            259,
            267
          ]
        },
        "EtherReceiverMock.setAcceptEther": {
          "1": [
            149,
            175
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405260043610601f5760003560e01c80634fea120c146038576033565b3660335760005460ff16603157600080fd5b005b600080fd5b348015604357600080fd5b50603160048036036020811015605857600080fd5b506000805460ff19169135151591909117905556fea2646970667358221220ae406edd49d7b928f4bb2bae7fba79265c61c59d7b7553b596724ed592c5e0d964736f6c634300060c0033",
  "deployedSourceMap": "25:261:55:-:0;;;;;;;;;;;;;;;;;;;;;;;231:12;;;;226:52;;259:8;;;226:52;25:261;;;;;90:92;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;149:12:55;:26;;-1:-1:-1;;149:26:55;90:92;;;;149:26;;;;;;90:92::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    25,
    286
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x1F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4FEA120C EQ PUSH1 0x38 JUMPI PUSH1 0x33 JUMP JUMPDEST CALLDATASIZE PUSH1 0x33 JUMPI PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH1 0x43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x31 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH1 0x58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 CALLDATALOAD ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE BLOCKHASH PUSH15 0xDD49D7B928F4BB2BAE7FBA79265C61 0xC5 SWAP14 PUSH28 0x7553B596724ED592C5E0D964736F6C634300060C0033000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        25,
        286
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "MSTORE",
      "path": "55"
    },
    "5": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "CALLDATASIZE",
      "path": "55"
    },
    "8": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "LT",
      "path": "55"
    },
    "9": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x1F"
    },
    "11": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "JUMPI",
      "path": "55"
    },
    "12": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "CALLDATALOAD",
      "path": "55"
    },
    "15": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0xE0"
    },
    "17": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "SHR",
      "path": "55"
    },
    "18": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "DUP1",
      "path": "55"
    },
    "19": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "PUSH4",
      "path": "55",
      "value": "0x4FEA120C"
    },
    "24": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "EQ",
      "path": "55"
    },
    "25": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x38"
    },
    "27": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "JUMPI",
      "path": "55"
    },
    "28": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x33"
    },
    "30": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "JUMP",
      "path": "55"
    },
    "31": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "JUMPDEST",
      "path": "55"
    },
    "32": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "CALLDATASIZE",
      "path": "55"
    },
    "33": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x33"
    },
    "35": {
      "fn": null,
      "offset": [
        25,
        286
      ],
      "op": "JUMPI",
      "path": "55"
    },
    "36": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        231,
        243
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x0"
    },
    "38": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        231,
        243
      ],
      "op": "SLOAD",
      "path": "55"
    },
    "39": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        231,
        243
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0xFF"
    },
    "41": {
      "branch": 2,
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        231,
        243
      ],
      "op": "AND",
      "path": "55"
    },
    "42": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        226,
        278
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x31"
    },
    "44": {
      "branch": 2,
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        226,
        278
      ],
      "op": "JUMPI",
      "path": "55"
    },
    "45": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        259,
        267
      ],
      "op": "PUSH1",
      "path": "55",
      "statement": 0,
      "value": "0x0"
    },
    "47": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        259,
        267
      ],
      "op": "DUP1",
      "path": "55"
    },
    "48": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        259,
        267
      ],
      "op": "REVERT",
      "path": "55"
    },
    "49": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        226,
        278
      ],
      "op": "JUMPDEST",
      "path": "55"
    },
    "50": {
      "offset": [
        25,
        286
      ],
      "op": "STOP",
      "path": "55"
    },
    "51": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        25,
        286
      ],
      "op": "JUMPDEST",
      "path": "55"
    },
    "52": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        25,
        286
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x0"
    },
    "54": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        25,
        286
      ],
      "op": "DUP1",
      "path": "55"
    },
    "55": {
      "first_revert": true,
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        25,
        286
      ],
      "op": "REVERT",
      "path": "55"
    },
    "56": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "JUMPDEST",
      "path": "55"
    },
    "57": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "CALLVALUE",
      "path": "55"
    },
    "58": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "DUP1",
      "path": "55"
    },
    "59": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "ISZERO",
      "path": "55"
    },
    "60": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x43"
    },
    "62": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "JUMPI",
      "path": "55"
    },
    "63": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x0"
    },
    "65": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "DUP1",
      "path": "55"
    },
    "66": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "REVERT",
      "path": "55"
    },
    "67": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "JUMPDEST",
      "path": "55"
    },
    "68": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "POP",
      "path": "55"
    },
    "69": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x31"
    },
    "71": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x4"
    },
    "73": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "DUP1",
      "path": "55"
    },
    "74": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "CALLDATASIZE",
      "path": "55"
    },
    "75": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "SUB",
      "path": "55"
    },
    "76": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x20"
    },
    "78": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "DUP2",
      "path": "55"
    },
    "79": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "LT",
      "path": "55"
    },
    "80": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "ISZERO",
      "path": "55"
    },
    "81": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x58"
    },
    "83": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "JUMPI",
      "path": "55"
    },
    "84": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "PUSH1",
      "path": "55",
      "value": "0x0"
    },
    "86": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "DUP1",
      "path": "55"
    },
    "87": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "REVERT",
      "path": "55"
    },
    "88": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "JUMPDEST",
      "path": "55"
    },
    "89": {
      "op": "POP"
    },
    "90": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        149,
        161
      ],
      "op": "PUSH1",
      "path": "55",
      "statement": 1,
      "value": "0x0"
    },
    "92": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        149,
        175
      ],
      "op": "DUP1",
      "path": "55"
    },
    "93": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        149,
        175
      ],
      "op": "SLOAD",
      "path": "55"
    },
    "94": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "96": {
      "op": "NOT"
    },
    "97": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        149,
        175
      ],
      "op": "AND",
      "path": "55"
    },
    "98": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "SWAP2",
      "path": "55"
    },
    "99": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "CALLDATALOAD",
      "path": "55"
    },
    "100": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "ISZERO",
      "path": "55"
    },
    "101": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        90,
        182
      ],
      "op": "ISZERO",
      "path": "55"
    },
    "102": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        149,
        175
      ],
      "op": "SWAP2",
      "path": "55"
    },
    "103": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        149,
        175
      ],
      "op": "SWAP1",
      "path": "55"
    },
    "104": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        149,
        175
      ],
      "op": "SWAP2",
      "path": "55"
    },
    "105": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        149,
        175
      ],
      "op": "OR",
      "path": "55"
    },
    "106": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        149,
        175
      ],
      "op": "SWAP1",
      "path": "55"
    },
    "107": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        149,
        175
      ],
      "op": "SSTORE",
      "path": "55"
    },
    "108": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "jump": "o",
      "offset": [
        90,
        182
      ],
      "op": "JUMP",
      "path": "55"
    }
  },
  "sha1": "786ebc071736540a4f5d2ddb4d5367a087d5795f",
  "source": "pragma solidity ^0.6.0;\n\ncontract EtherReceiverMock {\n    bool private _acceptEther;\n\n    function setAcceptEther(bool acceptEther) public {\n        _acceptEther = acceptEther;\n    }\n\n    receive () external payable {\n        if (!_acceptEther) {\n            revert();\n        }\n    }\n}\n",
  "sourceMap": "25:261:55:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin/contracts/mocks/EtherReceiverMock.sol",
  "type": "contract"
}